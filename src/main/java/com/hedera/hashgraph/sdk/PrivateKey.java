package com.hedera.hashgraph.sdk;

import org.bouncycastle.math.ec.rfc8032.Ed25519;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

// TODO: Multiple algorithms
// TODO: #fromString
// TODO: #fromBytes
// TODO: #fromMnemonic

/**
 * A private key on the Hederaâ„¢ network.
 */
public final class PrivateKey extends Key {
    private static final ThreadLocal<SecureRandom> secureRandom = ThreadLocal.withInitial(() -> {
        try {
            return SecureRandom.getInstanceStrong();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    });

    private final byte[] keyData;

    PrivateKey(byte[] keyData) {
        this.keyData = keyData;
    }

    /**
     * Generates a new <a href="https://ed25519.cr.yp.to/">Ed25519</a> private key.
     *
     * @return the new Ed25519 private key.
     */
    public static PrivateKey generateEd25519() {
        byte[] keyData = new byte[Ed25519.SECRET_KEY_SIZE];
        secureRandom.get().nextBytes(keyData);

        return new PrivateKey(keyData);
    }

    /**
     * Derive a public key from this private key.
     * <p>
     * The public key can be freely given and used by other parties to verify the signatures generated by
     * this private key.
     *
     * @return the corresponding public key for this private key.
     */
    public PublicKey getPublicKey() {
        byte[] publicKeyData = new byte[Ed25519.PUBLIC_KEY_SIZE];
        Ed25519.generatePublicKey(keyData, 0, publicKeyData, 0);

        return new PublicKey(publicKeyData);
    }

    /**
     * Sign a message with this private key.
     *
     * @return the signature of the message.
     */
    public byte[] sign(byte[] message) {
        byte[] signature = new byte[Ed25519.SIGNATURE_SIZE];
        Ed25519.sign(keyData, 0, message, 0, message.length, signature, 0);

        return signature;
    }

    @Override
    com.hedera.hashgraph.sdk.proto.Key toProtobuf() {
        // Forward to [toProtobuf] on the corresponding public key.
        return getPublicKey().toProtobuf();
    }
}
