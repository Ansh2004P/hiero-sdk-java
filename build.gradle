plugins {
    id "java"
    id "idea"
    id "com.google.protobuf" version "0.8.12"
    id "net.ltgt.errorprone" version "1.1.1"
}

group = "com.hedera.hashgraph"
version = "2.0.0-SNAPSHOT"
description = "Hederaâ„¢ Hashgraph SDK for Java"

repositories {
    mavenCentral()
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    // https://github.com/google/error-prone
    // https://errorprone.info/
    errorprone "com.google.errorprone:error_prone_core:2.3.4"

    // https://github.com/eclipse-ee4j/common-annotations-api
    implementation "jakarta.annotation:jakarta.annotation-api:1.3.5"

    // Converts between Java 8 CompletableFuture and Guava ListenableFuture
    // https://guava.dev/releases/25.0-jre/api/docs/com/google/common/util/concurrent/FluentFuture.html
    // https://github.com/lukas-krecan/future-converter#java8-guava
    implementation "net.javacrumbs.future-converter:future-converter-java8-guava:1.2.0"

    // NOTE: BouncyCastle is frozen at v1.60 for compatibility with Corda <https://www.corda.net/>
    // <https://github.com/corda/corda/blob/2c10b6c3b9dace7831b5da73a065c3269a703d85/constants.properties#L23>
    implementation "org.bouncycastle:bcprov-jdk15on:1.60"

    // Protobuf Lite is used to maintain easy compatibility with Android
    // https://github.com/protocolbuffers/protobuf/blob/master/java/lite.md
    implementation "com.google.protobuf:protobuf-javalite:3.11.4"

    implementation "io.grpc:grpc-api:1.28.1"
    implementation "io.grpc:grpc-protobuf-lite:1.28.1"
    implementation "io.grpc:grpc-stub:1.28.1"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.1"
    testImplementation "org.assertj:assertj-core:3.15.0"

    integrationTestRuntimeOnly "io.grpc:grpc-netty-shaded:1.28.1"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.11.4"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.28.1"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }

            task.plugins {
                grpc {
                    option "lite"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.errorprone {
        // Ignore generated and protobuf code
        disableWarningsInGeneratedCode = true
        excludedPaths = ".*generated.*"
    }
}

sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integrationTest/java"

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

idea {
    module {
        sourceDirs -= file('src/integrationTest/java')
        testSourceDirs += file('src/integrationTest/java')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    useJUnitPlatform()

    // this task will fail on the first failed test
    failFast = true

    // maximum number of test processes
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    // maximum heap size for the process
    maxHeapSize = "1G"

    // emit logs per passed or failed test
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
